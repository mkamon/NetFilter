#pragma once

#include "Common.hpp"


namespace testData
{
    namespace subnet
    {
        namespace net1
        {
            Rule::Net net{0xc0a80100, 24}; // 192.168.1.0
            std::vector<uint32_t> addresses = {0xc0a80101, 0xc0a80111, 0xc0a80164, 0xc0a801f2, 0xc0a801d4, 0xc0a801a5, 0xc0a8017e, 0xc0a801fd, 0xc0a801aa, 0xc0a801d5, 0xc0a801e4, 0xc0a8017d, 0xc0a801f3, 0xc0a80166, 0xc0a80198, 0xc0a801b6, 0xc0a8011d, 0xc0a80133, 0xc0a801b3, 0xc0a801d3, 0xc0a8016c, 0xc0a801c0, 0xc0a80124, 0xc0a801b4, 0xc0a80159, 0xc0a801a2, 0xc0a801fc, 0xc0a80160, 0xc0a801a4, 0xc0a8012e, 0xc0a801d8, 0xc0a80176, 0xc0a801f6, 0xc0a80185, 0xc0a8015a, 0xc0a801e8, 0xc0a80107, 0xc0a80108, 0xc0a801ec, 0xc0a80170, 0xc0a8015e, 0xc0a80111, 0xc0a801b7, 0xc0a8015c, 0xc0a80193, 0xc0a801a7, 0xc0a8013c, 0xc0a801a1, 0xc0a801a9, 0xc0a80151};
        }

        namespace net2
        {
            Rule::Net net{0xc0a8f000, 20}; // 192.168.240.0
            std::vector<uint32_t> addresses = {0xc0a8f828, 0xc0a8f77e, 0xc0a8f998, 0xc0a8f7ee, 0xc0a8fa7a, 0xc0a8f3d4, 0xc0a8faea, 0xc0a8f4f6, 0xc0a8f45d, 0xc0a8f2ff, 0xc0a8faa5, 0xc0a8fdc8, 0xc0a8fcf9, 0xc0a8ff92, 0xc0a8feec, 0xc0a8fc08, 0xc0a8ff1e, 0xc0a8fd9b, 0xc0a8f61a, 0xc0a8f300, 0xc0a8f361, 0xc0a8f6da, 0xc0a8f2da, 0xc0a8fc9f, 0xc0a8fd08, 0xc0a8f6f2, 0xc0a8f9d0, 0xc0a8fd97, 0xc0a8fd00, 0xc0a8f2e8, 0xc0a8fe44, 0xc0a8f79a, 0xc0a8ff25, 0xc0a8f131, 0xc0a8f1ec, 0xc0a8f2a5, 0xc0a8f1f3, 0xc0a8f5ef, 0xc0a8fcc6, 0xc0a8f132, 0xc0a8f8ef, 0xc0a8fce7, 0xc0a8fad1, 0xc0a8fa54, 0xc0a8fc17, 0xc0a8f229, 0xc0a8f74a, 0xc0a8f802, 0xc0a8fb52, 0xc0a8f1a9};
        }

        namespace net3
        {
            Rule::Net net{0xc0a8f080, 25}; // 192.168.240.128
            std::vector<uint32_t> addresses = { 0xc0a8f0d6, 0xc0a8f0af, 0xc0a8f096, 0xc0a8f093, 0xc0a8f0a6, 0xc0a8f0c9, 0xc0a8f0b2, 0xc0a8f0f0, 0xc0a8f0f8, 0xc0a8f0ab, 0xc0a8f0b4, 0xc0a8f0a0, 0xc0a8f0a0, 0xc0a8f0dc, 0xc0a8f0f0, 0xc0a8f09c, 0xc0a8f096, 0xc0a8f0e6, 0xc0a8f0b4, 0xc0a8f0da, 0xc0a8f0bb, 0xc0a8f0f0, 0xc0a8f0e8, 0xc0a8f0f5, 0xc0a8f0f4, 0xc0a8f0a6, 0xc0a8f0e7, 0xc0a8f09d, 0xc0a8f0ba, 0xc0a8f086, 0xc0a8f0cc, 0xc0a8f09a, 0xc0a8f0f2, 0xc0a8f0a3, 0xc0a8f083, 0xc0a8f0c7, 0xc0a8f0d0, 0xc0a8f0f1, 0xc0a8f0b7, 0xc0a8f0b1, 0xc0a8f09f, 0xc0a8f0b2, 0xc0a8f0ef, 0xc0a8f0ba, 0xc0a8f0a6, 0xc0a8f0b0, 0xc0a8f0eb, 0xc0a8f0b5, 0xc0a8f0b5, 0xc0a8f0c4};
        }

        namespace net4
        {
            Rule::Net net{0xc0a8f180, 25}; // 192.168.241.128
            std::vector<uint32_t> addresses = { 0xc0a8f1b8, 0xc0a8f1c3, 0xc0a8f1ec, 0xc0a8f1ec, 0xc0a8f1d4, 0xc0a8f1ae, 0xc0a8f1fc, 0xc0a8f18a, 0xc0a8f1b4, 0xc0a8f1d0, 0xc0a8f194, 0xc0a8f198, 0xc0a8f196, 0xc0a8f192, 0xc0a8f1d1, 0xc0a8f186, 0xc0a8f1be, 0xc0a8f1c4, 0xc0a8f1f7, 0xc0a8f1b9, 0xc0a8f1d5, 0xc0a8f1f6, 0xc0a8f1e5, 0xc0a8f1ff, 0xc0a8f1ef, 0xc0a8f1da, 0xc0a8f1d0, 0xc0a8f186, 0xc0a8f1cd, 0xc0a8f181, 0xc0a8f1af, 0xc0a8f1d7, 0xc0a8f183, 0xc0a8f198, 0xc0a8f1c1, 0xc0a8f1e2, 0xc0a8f1ae, 0xc0a8f1dd, 0xc0a8f1c4, 0xc0a8f1f2, 0xc0a8f18a, 0xc0a8f18a, 0xc0a8f196, 0xc0a8f1c1, 0xc0a8f1a7, 0xc0a8f1a8, 0xc0a8f1a1, 0xc0a8f181, 0xc0a8f1ad, 0xc0a8f199};
        }

        namespace net5
        {
            Rule::Net net{0xc0a8f280, 25}; // 192.168.242.128
            std::vector<uint32_t> addresses = {0xc0a8f2a3, 0xc0a8f28a, 0xc0a8f286, 0xc0a8f2b1, 0xc0a8f299, 0xc0a8f2f1, 0xc0a8f2e5, 0xc0a8f2b0, 0xc0a8f28b, 0xc0a8f2c5, 0xc0a8f28c, 0xc0a8f2ac, 0xc0a8f282, 0xc0a8f293, 0xc0a8f28b, 0xc0a8f2b0, 0xc0a8f2b6, 0xc0a8f2be, 0xc0a8f283, 0xc0a8f29f, 0xc0a8f2be, 0xc0a8f2a1, 0xc0a8f29f, 0xc0a8f2d8, 0xc0a8f2eb, 0xc0a8f292, 0xc0a8f2d7, 0xc0a8f2c2, 0xc0a8f285, 0xc0a8f2b1, 0xc0a8f2ea, 0xc0a8f2fb, 0xc0a8f2a1, 0xc0a8f2f7, 0xc0a8f2a5, 0xc0a8f2f9, 0xc0a8f2e5, 0xc0a8f2b0, 0xc0a8f2f3, 0xc0a8f29f, 0xc0a8f29f, 0xc0a8f2cc, 0xc0a8f2f0, 0xc0a8f2e5, 0xc0a8f2ba, 0xc0a8f295, 0xc0a8f2f8, 0xc0a8f2bf, 0xc0a8f2e3, 0xc0a8f2f2};
        }

        namespace net6
        {
            Rule::Net net{0xc0a8f380, 25}; // 192.168.243.128
            std::vector<uint32_t> addresses = {0xc0a8f3bd, 0xc0a8f3a3, 0xc0a8f3a5, 0xc0a8f3be, 0xc0a8f38c, 0xc0a8f3c5, 0xc0a8f3ec, 0xc0a8f384, 0xc0a8f390, 0xc0a8f39e, 0xc0a8f3a0, 0xc0a8f39f, 0xc0a8f398, 0xc0a8f392, 0xc0a8f3a5, 0xc0a8f396, 0xc0a8f3fb, 0xc0a8f3af, 0xc0a8f3ff, 0xc0a8f3a7, 0xc0a8f399, 0xc0a8f3e8, 0xc0a8f3a0, 0xc0a8f3c2, 0xc0a8f3bf, 0xc0a8f3d8, 0xc0a8f3b1, 0xc0a8f3b1, 0xc0a8f3eb, 0xc0a8f3b6, 0xc0a8f39a, 0xc0a8f3db, 0xc0a8f38e, 0xc0a8f3e6, 0xc0a8f3cf, 0xc0a8f388, 0xc0a8f3d7, 0xc0a8f391, 0xc0a8f392, 0xc0a8f392, 0xc0a8f3c8, 0xc0a8f3ac, 0xc0a8f3bb, 0xc0a8f3ae, 0xc0a8f3be, 0xc0a8f3db, 0xc0a8f3a4, 0xc0a8f3a1, 0xc0a8f3ad, 0xc0a8f3cb};
        }

    }

    std::vector<uint8_t> l4_protocols = {1,2,3,4, 5,6,7,8, 9,10,11,12, 13,14,15,16};
    std::vector<uint16_t> ports = {0x1010,0x1012,0x1020,0x1030, 0x2010,0x2012,0x2020,0x2030,  0x3010,0x3012,0x3020,0x3030, 0x4010,0x4012,0x4020,0x4030 };


}
